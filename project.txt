# https://www.debugandrelease.com/creating-a-simple-electron-application/
# https://www.debugandrelease.com/author/rezach/

npm i electron --save-dev
touch .gitignore

mdkir app
mkdir app
mkdir dist
mkdir docs
mkdir app/electron
mkdir app/src

touch app/electron/main.js

# Create the react application
$ npm i react react-dom --save-dev
$ touch app/src/index.jsx

npm i webpack webpack-cli --save-dev
touch webpack.config.js

npm i babel-loader --save-dev

$ cat webpack.config.js
module.exports = {
  entry: "./app/src/index.jsx",
  output: {
    path: path.resolve(__dirname, "app/dist"),
    filename: "bundle.js"
  },
  module: {
    rules: [
      {
        test: /\.jsx?$/,
        include: [path.resolve(__dirname, "app/src")],
        loader: "babel-loader",
        resolve: {
          extensions: [".js", ".jsx", ".json"]
        }
      }
    ]
  }
}

$ npm i @babel/core @babel/preset-env @babel/preset-react
$ vi .babelrc
{
    "presets": [
        "@babel/preset-env",
        "@babel/preset-react"
    ]
}

# We add a script in package.json
  "scripts": {
    "start": "electron .",
    "dev": "webpack --mode development --config webpack.config.js",
    :
  }

simple-electron-template/ $ npm run dev

> SimpleTemplate@1.0.0 dev
> webpack --mode development --config webpack.config.js

asset bundle.js 1.12 MiB [emitted] (name: main)
runtime modules 1.04 KiB 5 modules
modules by path ./node_modules/ 1.08 MiB
  modules by path ./node_modules/react-dom/ 1000 KiB
    ./node_modules/react-dom/client.js 619 bytes [built] [code generated]
    ./node_modules/react-dom/index.js 1.33 KiB [built] [code generated]
    ./node_modules/react-dom/cjs/react-dom.development.js 1000 KiB [built] [code generated]
  modules by path ./node_modules/react/ 85.7 KiB
    ./node_modules/react/index.js 190 bytes [built] [code generated]
    ./node_modules/react/cjs/react.development.js 85.5 KiB [built] [code generated]
  modules by path ./node_modules/scheduler/ 17.3 KiB
    ./node_modules/scheduler/index.js 198 bytes [built] [code generated]
    ./node_modules/scheduler/cjs/scheduler.development.js 17.1 KiB [built] [code generated]
./app/src/index.jsx 243 bytes [built] [code generated]
webpack 5.75.0 compiled successfully in 429 ms
simple-electron-template/ $

# Our first handwritten webpack config for a react application is working !!

# We need webpack loader for html files
npm i html-loader --save-dev

# Now we will add a rule to process html file
# After this we need a plugin which will put a statment to inject our javascript into this file.
npm i html-webpack-plugin --save-dev

simple-electron-template/ $ npm run dev

> SimpleTemplate@1.0.0 dev
> webpack --mode development --config webpack.config.js

asset bundle.js 1.12 MiB [compared for emit] (name: main)
asset index.html 191 bytes [emitted]
runtime modules 1.04 KiB 5 modules
modules by path ./node_modules/ 1.08 MiB
modules by path ./node_modules/react-dom/ 1000 KiB
    ./node_modules/react-dom/client.js 619 bytes [built] [code generated]
./node_modules/react-dom/index.js 1.33 KiB [built] [code generated]
./node_modules/react-dom/cjs/react-dom.development.js 1000 KiB [built] [code generated]
modules by path ./node_modules/react/ 85.7 KiB
    ./node_modules/react/index.js 190 bytes [built] [code generated]
./node_modules/react/cjs/react.development.js 85.5 KiB [built] [code generated]
modules by path ./node_modules/scheduler/ 17.3 KiB
    ./node_modules/scheduler/index.js 198 bytes [built] [code generated]
./node_modules/scheduler/cjs/scheduler.development.js 17.1 KiB [built] [code generated]
./app/src/index.jsx 243 bytes [built] [code generated]
webpack 5.75.0 compiled successfully in 453 ms
simple-electron-template/ $

# We can see that the line to add script has been injected into our index.html
<script defer src="bundle.js"></script></head>

$ cat dist/index.html
<!DOCTYPE html>
<html lang="en-US">
<head>
    <title>My app</title>
    <meta charset="utf-8" />
<script defer src="bundle.js"></script></head>
<body>
<div>Hello world</div>
</body>
</html>

# Now we will load the generated file instead of our index.html template file

$ cat app/electron/main.js

function createWindow() {
:
  // Load our HTML file
  // window.loadFile("index.html");
  window.loadFile("app/dist/index.html");
}

# branch: Created branch for just javascript
git branch js
git checkout js

## Add CSS to the project:
# We need to add loader for CSS
npm i style-loader css-loader --save-dev

# The css loader loads CSS files
# The style-loader injects those styles into html

## We will add support for webpack-dev-server
# Enters webpack-dev-server
npm i webpack-dev-server --save-dev

# Now we will just add the devServer property to webpack.config.js
module.exports = {
:
  devServer: {
    host: "localhost",
    port: "40992"
  },
  module: {
:

# Now we will need two terminal windows
Terminal 1: Run electron app
Terminal 2: Run webpack server

# We will update the mode to development in webpack.config.js
mode: "development",

# We have to make a change in main.js if we are using webpack development server
# We have to use loadURL as our bundled assets are being hosted by webpack at http://localhost:40992/

So we have to use
T1:
npx webpack server

T2:
npx electron .

The live compilation happen.
We have to use Cmd+R to reload in electron

## Multiple Webpack Configurations
npm i webpack-merge --save-dev

$ vi webpack.config.dev.js
const {
    merge
} = require("webpack-merge");
const base = require("./webpack.config.js");

module.exports = merge(base, {
    mode: "development",
    devServer: {
        host: "localhost",
        port: "40992"
    }
});

# Now we can remove the mode and devServer property from webpack.config.js
# So now with npx webpack serve will be used with webpack.config.dev.js
npx webpack serve --config webpack.config.dev.js

## Now we will create webpack.config.prod.js
# Also we will use environment variable in main.js to decide whether we are using URL (development mode) or we are using file (production mode).
# We will use cross-env package to define environment variables
npm i cross-env --save-dev.
We will use NODE_ENV as the variable name.
# We will make the change in main.js
const {
  app,
  BrowserWindow
} = require("electron");

const isDevelopment = process.env.NODE_ENV === "development";

So for two modes we have following commands:
production mode:
npx webpack --config ./webpack.config.prod.js

development mode:
npx webpack --config ./webpack.config.dev.js

simple-electron-template/ $
simple-electron-template/ $ npm i cross-env --save-dev.


const isDevelopment = process.env.NODE_ENV === "development";

function createWindow() {
:
  if (isDevelopment) {
    console.log('Development mode');
    window.loadURL("http://localhost:40992/");
  } else {
    console.log('Production mode');
    window.loadFile("app/dist/index.html");
  }
}

simple-electron-template/ $ npx cross-env NODE_ENV=production electron .
Production mode
simple-electron-template/ $ npx cross-env NODE_ENV=development electron .
Development mode

# Our two modes are working !!

# Also we add scripts to make sure that these work with ease
  "scripts": {
    "dev-server": "webpack serve --mode development --config ./webpack.config.dev.js",
    "dev": "cross-env NODE_ENV=development electron .",
    "preprod": "webpack --mode production --config ./webpack.config.prod.js",
    "prod": "cross-env NODE_ENV=production electron ."
  },

# TBD: We will build custom targets which combine the two using on-wait and concurrently

# Our final scripts block looks like this:
  "scripts": {
    "dev-server": "webpack serve --mode development --config ./webpack.config.dev.js",
    "dev": "cross-env NODE_ENV=development electron .",
    "preprod": "webpack --mode production --config ./webpack.config.prod.js",
    "prod": "cross-env NODE_ENV=production electron .",
    "postinstall": "electron-builder -m install-app-deps",
    "pack": "electron-builder -m --dir",
    "dist": "npm run dist-mac",
    "dist-mac": "npm run preprod && electron-builder --mac",
    "dist-linux": "npm run preprod && electron-builder --linux",
    "dist-windows": "npm run preprod && electron-builder --windows"
  },

We can take a look at
https://www.debugandrelease.com/creating-a-simple-electron-application/